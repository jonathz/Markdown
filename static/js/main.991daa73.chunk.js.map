{"version":3,"sources":["App.js","index.js"],"names":["marked","require","Editor","props","id","onChange","type","value","markdown","Toolbar","className","title","text","icon","onClick","Preview","console","log","dangerouslySetInnerHTML","__html","App","state","editorMaximized","previewMaximized","handleChange","bind","handleEditorMaximize","handlePreviewMaximize","e","this","setState","target","classes","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNACMA,EAASC,EAAS,IAElBC,EAAS,SAAAC,GACb,OACE,0BACEC,GAAG,SACHC,SAAUF,EAAME,SAChBC,KAAK,OACLC,MAAOJ,EAAMK,YAIbC,EAAU,SAAAN,GACd,OACE,sBAAKO,UAAU,UAAf,UACE,mBAAGA,UAAU,uBAAuBC,MAAM,sBACzCR,EAAMS,KACP,mBAAGF,UAAWP,EAAMU,KAAMC,QAASX,EAAMW,cAKzCC,EAAU,SAAAZ,GACd,OACE,qCACCa,QAAQC,IAAId,EAAMK,UACnB,qBACGU,wBAAyB,CACxBC,OAAQnB,EAAOG,EAAMK,WAEvBJ,GAAG,gBA6GMgB,E,kDA1Db,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IACDkB,MAAQ,CACXb,SAhDW,0pCAiDXc,iBAAiB,EACjBC,kBAAkB,GAEpB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,qBAAuB,EAAKA,qBAAqBD,KAA1B,gBAC5B,EAAKE,sBAAwB,EAAKA,sBAAsBF,KAA3B,gBATZ,E,gDAWnB,SAAaG,GACXC,KAAKC,SAAS,CACZtB,SAAUoB,EAAEG,OAAOxB,U,kCAGvB,WACEsB,KAAKC,SAAS,CACZR,iBAAkBO,KAAKR,MAAMC,oB,mCAGjC,WACEO,KAAKC,SAAS,CACZP,kBAAmBM,KAAKR,MAAME,qB,oBAGlC,WACE,IAAMS,EAAUH,KAAKR,MAAMC,gBACvB,CAAC,uBAAwB,mBAAoB,kBAC7CO,KAAKR,MAAME,iBACT,CAAC,kBAAmB,wBAAyB,kBAC7C,CAAC,aAAc,cAAe,oBACpC,OACE,gCACE,sBAAKb,UAAWsB,EAAQ,GAAxB,UACE,cAAC,EAAD,CACEnB,KAAMmB,EAAQ,GACdlB,QAASe,KAAKH,qBACdd,KAAK,WAEP,cAAC,EAAD,CAAQJ,SAAUqB,KAAKR,MAAMb,SAAUH,SAAUwB,KAAKL,kBAExD,qBAAKd,UAAU,cACf,sBAAKA,UAAWsB,EAAQ,GAAxB,UACA,cAAC,EAAD,CACInB,KAAMmB,EAAQ,GACdlB,QAASe,KAAKF,sBACdf,KAAK,cAER,cAAC,EAAD,CAASJ,SAAUqB,KAAKR,MAAMb,qB,GAlDrByB,IAAMC,WC1ExBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.991daa73.chunk.js","sourcesContent":["import React from 'react'\nconst marked = require ('marked')\n\nconst Editor = props => {\n  return (\n    <textarea\n      id='editor'\n      onChange={props.onChange}\n      type='text'\n      value={props.markdown}\n    />\n  );\n};\nconst Toolbar = props => {\n  return (\n    <div className='toolbar'>\n      <i className='fa fa-free-code-camp' title='no-stack-dub-sack' />\n      {props.text}\n      <i className={props.icon} onClick={props.onClick} />\n    </div>\n  );\n};\n\nconst Preview = props => {\n  return (\n    <>\n    {console.log(props.markdown)}\n    <div\n       dangerouslySetInnerHTML={{\n        __html: marked(props.markdown)\n      }} \n      id='preview'\n    /> \n    </>\n  );\n};\n\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://academiageek.co/wp-content/uploads/2021/03/Logo-AG-2021-140x98.png)\n`;\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: placeholder,\n      editorMaximized: false,\n      previewMaximized: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleEditorMaximize = this.handleEditorMaximize.bind(this);\n    this.handlePreviewMaximize = this.handlePreviewMaximize.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      markdown: e.target.value\n    });\n  }\n  handleEditorMaximize() {\n    this.setState({\n      editorMaximized: !this.state.editorMaximized\n    });\n  }\n  handlePreviewMaximize() {\n    this.setState({\n      previewMaximized: !this.state.previewMaximized\n    });\n  }\n  render() {\n    const classes = this.state.editorMaximized\n      ? ['editorWrap maximized', 'previewWrap hide', 'fa fa-compress']\n      : this.state.previewMaximized\n        ? ['editorWrap hide', 'previewWrap maximized', 'fa fa-compress']\n        : ['editorWrap', 'previewWrap', 'fa fa-arrows-alt'];\n    return (\n      <div>\n        <div className={classes[0]}>\n          <Toolbar\n            icon={classes[2]}\n            onClick={this.handleEditorMaximize}\n            text='Editor'\n          /> \n          <Editor markdown={this.state.markdown} onChange={this.handleChange} />\n        </div>\n        <div className='converter' />\n        <div className={classes[1]}>\n        <Toolbar\n            icon={classes[2]}\n            onClick={this.handlePreviewMaximize}\n            text='Previewer'\n          /> \n         <Preview markdown={this.state.markdown} /> \n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}